// Generated by CoffeeScript 1.6.3
(function() {
  var Game, initEngineAndGame, keyMapping, root;

  keyMapping = {
    38: 'thurst',
    37: 'rotateLeft',
    39: 'rotateRight'
  };

  Game = (function() {
    function Game() {
      var action, code;
      this.actions = {};
      for (code in keyMapping) {
        action = keyMapping[code];
        this.actions[action] = false;
      }
    }

    Game.prototype.initGame = function() {
      this.spaceShip = new cofgl.SpaceShip;
      this.world = new cofgl.World(this.spaceShip);
      return this.processor = new cofgl.Processor(cofgl.resmgr.resources['shaders/nothing']);
    };

    Game.prototype.initEventHandlers = function() {
      var _this = this;
      return $(window).bind('keydown', function(event) {
        return _this.onKeyDown(event);
      }).bind('keyup', function(event) {
        return _this.onKeyUp(event);
      });
    };

    Game.prototype.onKeyDown = function(event) {
      var action;
      action = keyMapping[event.which];
      if (action != null) {
        this.actions[action] = true;
        return false;
      }
    };

    Game.prototype.onKeyUp = function(event) {
      var action;
      action = keyMapping[event.which];
      if (action != null) {
        this.actions[action] = false;
        return false;
      }
    };

    Game.prototype.run = function() {
      var _this = this;
      return cofgl.resmgr.wait(function() {
        _this.initGame();
        _this.initEventHandlers();
        return _this.mainloop();
      });
    };

    Game.prototype.mainloop = function() {
      var _this = this;
      return cofgl.engine.mainloop(function(dt) {
        _this.updateGame(dt);
        return _this.render();
      });
    };

    Game.prototype.updateGame = function(dt) {
      if (this.actions.rotateRight) {
        console.debug("rotateRight");
        this.spaceShip.rotateRight();
      }
      if (this.actions.rotateLeft) {
        console.debug("rotateLeft");
        this.spaceShip.rotateLeft();
      }
      if (this.actions.thurst) {
        console.debug("thurst");
        this.spaceShip.thurst();
      }
      this.spaceShip.update(dt);
      return this.world.update(dt);
    };

    Game.prototype.render = function() {
      cofgl.clear();
      this.processor.push();
      this.world.draw();
      return this.processor.pop();
    };

    return Game;

  })();

  initEngineAndGame = function(selector, debug) {
    var canvas;
    canvas = $(selector)[0];
    cofgl.debugPanel = new cofgl.DebugPanel();
    cofgl.engine = new cofgl.Engine(canvas, debug);
    cofgl.resmgr = cofgl.makeDefaultResourceManager();
    cofgl.game = new Game;
    return cofgl.game.run();
  };

  $(document).ready(function() {
    var debug;
    debug = cofgl.getRuntimeParameter('debug') === '1';
    return initEngineAndGame('#viewport', debug);
  });

  root = self.cofgl != null ? self.cofgl : self.cofgl = {};

  root.game = null;

  root.debugPanel = null;

  root.resmgr = null;

  root.engine = null;

}).call(this);
